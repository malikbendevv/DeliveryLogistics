// schema.prisma
generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  customer
  driver
  admin
}

enum OrderStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

model User {
  id           String   @id @default(uuid())
  firstName    String
  lastName     String
  email        String   @unique
  password     String
  phoneNumber  String?  @unique
  address      String?
  refreshToken String?  @unique
  role         Role     @default(customer)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  customerOrders Order[]   @relation("CustomerOrders")
  driverOrders   Order[]   @relation("DriverOrders")
  addresses      Address[]

  @@index([email])
  @@index([phoneNumber])
}

model Address {
  id        String  @id @default(uuid())
  street    String
  street2   String?
  city      String
  state     String
  zipCode   String
  country   String  @default("Algeria")
  latitude  Float?
  longitude Float?
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  // Relations
  pickupOrders  Order[] @relation("OrderPickupAddress")
  dropoffOrders Order[] @relation("OrderDropoffAddress")
}

model Order {
  id                String      @id @default(uuid())
  name              String
  description       String?
  price             Float
  // Customer relation
  customer          User        @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId        String
  // Driver relation
  driver            User?       @relation("DriverOrders", fields: [driverId], references: [id])
  driverId          String?
  // Address relations
  pickupAddress     Address     @relation("OrderPickupAddress", fields: [pickupAddressId], references: [id])
  pickupAddressId   String
  dropoffAddress    Address     @relation("OrderDropoffAddress", fields: [dropoffAddressId], references: [id])
  dropoffAddressId  String
  // Order details
  status            OrderStatus @default(PENDING)
  estimatedDistance Float?
  estimatedDuration Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  archived          Boolean     @default(false)

  @@index([customerId])
  @@index([driverId])
  @@index([status])
}
